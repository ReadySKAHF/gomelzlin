class CatalogSearch {
    constructor() {
        this.searchInput = document.getElementById('searchInput');
        this.suggestionsContainer = document.getElementById('suggestions');
        this.searchForm = document.querySelector('.search-form');
        
        this.searchTimeout = null;
        this.isSearching = false;
        this.currentQuery = '';
        this.selectedIndex = -1;
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
     */
    init() {
        if (!this.searchInput) return;
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        this.searchInput.addEventListener('input', this.handleInput.bind(this));
        this.searchInput.addEventListener('keydown', this.handleKeydown.bind(this));
        this.searchInput.addEventListener('focus', this.handleFocus.bind(this));
        this.searchInput.addEventListener('blur', this.handleBlur.bind(this));
        
        if (this.searchForm) {
            this.searchForm.addEventListener('submit', this.handleSubmit.bind(this));
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–∏—Å–∫–∞
        document.addEventListener('click', this.handleOutsideClick.bind(this));
        
        console.log('Catalog Search initialized');
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
     */
    handleInput(event) {
        const query = event.target.value.trim();
        this.currentQuery = query;
        this.selectedIndex = -1;
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
        clearTimeout(this.searchTimeout);
        
        if (query.length < 2) {
            this.hideSuggestions();
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        this.searchTimeout = setTimeout(() => {
            this.fetchSuggestions(query);
        }, 300);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à
     */
    handleKeydown(event) {
        const suggestions = this.suggestionsContainer.querySelectorAll('.suggestion-item');
        
        switch (event.key) {
            case 'ArrowDown':
                event.preventDefault();
                this.selectedIndex = Math.min(this.selectedIndex + 1, suggestions.length - 1);
                this.updateSelection(suggestions);
                break;
                
            case 'ArrowUp':
                event.preventDefault();
                this.selectedIndex = Math.max(this.selectedIndex - 1, -1);
                this.updateSelection(suggestions);
                break;
                
            case 'Enter':
                event.preventDefault();
                if (this.selectedIndex >= 0 && suggestions[this.selectedIndex]) {
                    this.selectSuggestion(suggestions[this.selectedIndex]);
                } else {
                    this.submitSearch();
                }
                break;
                
            case 'Escape':
                this.hideSuggestions();
                this.searchInput.blur();
                break;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
     */
    updateSelection(suggestions) {
        suggestions.forEach((item, index) => {
            if (index === this.selectedIndex) {
                item.classList.add('selected');
                item.scrollIntoView({ block: 'nearest' });
            } else {
                item.classList.remove('selected');
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
     */
    handleFocus(event) {
        if (this.currentQuery.length >= 2 && this.suggestionsContainer.children.length > 0) {
            this.showSuggestions();
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
     */
    handleBlur(event) {
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–ª–∏–∫ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
        setTimeout(() => {
            if (!this.suggestionsContainer.contains(document.activeElement)) {
                this.hideSuggestions();
            }
        }, 150);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –≤–Ω–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
     */
    handleOutsideClick(event) {
        const searchSection = event.target.closest('.search-section');
        if (!searchSection) {
            this.hideSuggestions();
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
     */
    handleSubmit(event) {
        event.preventDefault();
        this.submitSearch();
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
     */
    submitSearch() {
        const query = this.searchInput.value.trim();
        
        if (query.length < 2) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞', 'warning');
            return;
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
        window.location.href = `/catalog/search/?q=${encodeURIComponent(query)}`;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async fetchSuggestions(query) {
        if (this.isSearching) return;
        
        this.isSearching = true;
        this.showLoading();
        
        try {
            const response = await fetch(`/catalog/ajax/quick-search/?q=${encodeURIComponent(query)}`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            this.displaySuggestions(data.results || []);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞');
        } finally {
            this.isSearching = false;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading() {
        this.suggestionsContainer.innerHTML = `
            <div class="search-loading">
                –ü–æ–∏—Å–∫...
            </div>
        `;
        this.showSuggestions();
    }
    
    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
     */
    showError(message) {
        this.suggestionsContainer.innerHTML = `
            <div class="search-empty">
                <div class="search-empty-icon">‚ö†Ô∏è</div>
                <div>${message}</div>
            </div>
        `;
        this.showSuggestions();
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
     */
    displaySuggestions(results) {
        if (results.length === 0) {
            this.showEmptyState();
            return;
        }
        
        let html = '';
        
        results.forEach(item => {
            const emoji = this.getItemEmoji(item.name, item.category_name, item.type);
            const itemType = item.type === 'product' ? '–¢–æ–≤–∞—Ä' : '–ö–∞—Ç–µ–≥–æ—Ä–∏—è';
            
            html += `
                <div class="suggestion-item" 
                     data-url="${item.url}"
                     tabindex="0"
                     role="option">
                    
                    <div class="suggestion-emoji">
                        ${emoji}
                    </div>
                    
                    <div class="suggestion-content">
                        <div class="suggestion-title" title="${this.escapeHtml(item.name)}">
                            ${this.highlightQuery(item.name, this.currentQuery)}
                        </div>
                        
                        <div class="suggestion-meta">
                            <span class="suggestion-category">${itemType}</span>
                            
                            ${item.article ? `<span>–ê—Ä—Ç: ${item.article}</span>` : ''}
                            ${item.category_name ? `<span>‚Ä¢ ${item.category_name}</span>` : ''}
                            ${item.product_count !== undefined ? `<span>‚Ä¢ ${item.product_count} —Ç–æ–≤–∞—Ä–æ–≤</span>` : ''}
                        </div>
                    </div>
                </div>
            `;
        });
        
        this.suggestionsContainer.innerHTML = html;
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ –Ω–æ–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        this.bindSuggestionEvents();
        this.showSuggestions();
    }
    
    /**
     * –ü–æ–∫–∞–∑ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    showEmptyState() {
        this.suggestionsContainer.innerHTML = `
            <div class="search-empty">
                <div class="search-empty-icon">üîç</div>
                <div>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
                <div style="font-size: 0.8rem; margin-top: 0.5rem;">
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                </div>
            </div>
        `;
        this.showSuggestions();
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
     */
    bindSuggestionEvents() {
        const suggestions = this.suggestionsContainer.querySelectorAll('.suggestion-item');
        
        suggestions.forEach(item => {
            item.addEventListener('click', () => this.selectSuggestion(item));
            item.addEventListener('keydown', (event) => {
                if (event.key === 'Enter' || event.key === ' ') {
                    event.preventDefault();
                    this.selectSuggestion(item);
                }
            });
        });
    }
    
    /**
     * –í—ã–±–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
     */
    selectSuggestion(item) {
        const url = item.dataset.url;
        if (url) {
            window.location.href = url;
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
     */
    showSuggestions() {
        this.suggestionsContainer.style.display = 'block';
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
     */
    hideSuggestions() {
        this.suggestionsContainer.style.display = 'none';
        this.selectedIndex = -1;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    getItemEmoji(name, categoryName, type) {
        const lowerName = name.toLowerCase();
        const lowerCategory = (categoryName || '').toLowerCase();
        
        if (type === 'category') {
            // –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if (lowerName.includes('–∑–µ—Ä–Ω–æ')) return 'üåæ';
            if (lowerName.includes('–∫–æ—Ä–º–æ')) return 'üöú';
            if (lowerName.includes('–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å')) return 'ü•î';
            if (lowerName.includes('–º–µ—Ç–∏–∑')) return 'üî©';
            if (lowerName.includes('–±—É–Ω–∫–µ—Ä')) return 'üì¶';
            if (lowerName.includes('—Ä–µ–∂—É—â')) return '‚öîÔ∏è';
            if (lowerName.includes('–Ω–æ—Å–∏–ª–∫–∏')) return 'üöö';
            if (lowerName.includes('–Ω–æ–≤–∏–Ω–∫–∏')) return '‚ú®';
            if (lowerName.includes('–ø—Ä–æ—á–∏–µ') || lowerName.includes('—É—Å–ª—É–≥–∏')) return 'üõ†Ô∏è';
            return 'üìÅ';
        } else {
            // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
            if (lowerName.includes('–∂–∞—Ç–∫–∞') || lowerCategory.includes('–∑–µ—Ä–Ω–æ')) return 'üåæ';
            if (lowerName.includes('–∫–æ–º–±–∞–π–Ω') || lowerCategory.includes('–∫–æ—Ä–º–æ')) return 'üöú';
            if (lowerName.includes('–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å')) return 'ü•î';
            if (lowerName.includes('–±–æ–ª—Ç') || lowerName.includes('–≥–∞–π–∫–∞') || lowerCategory.includes('–º–µ—Ç–∏–∑')) return 'üî©';
            if (lowerName.includes('–±—É–Ω–∫–µ—Ä')) return 'üì¶';
            if (lowerName.includes('—Ä–µ–∂—É—â')) return '‚öîÔ∏è';
            if (lowerName.includes('–Ω–æ—Å–∏–ª–∫–∏')) return 'üöö';
            return 'üè≠';
        }
    }
    
    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç–µ
     */
    highlightQuery(text, query) {
        if (!query || query.length < 2) return this.escapeHtml(text);
        
        const regex = new RegExp(`(${this.escapeRegex(query)})`, 'gi');
        return this.escapeHtml(text).replace(regex, '<strong style="color: #cb413b;">$1</strong>');
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
     */
    escapeRegex(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(message, type = 'info') {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        alert(message);
    }
    
    /**
     * –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º
     */
    searchFor(query) {
        this.searchInput.value = query;
        this.currentQuery = query;
        window.location.href = `/catalog/search/?q=${encodeURIComponent(query)}`;
    }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
function handleSearchInput(event) {
    if (window.catalogSearch) {
        window.catalogSearch.handleInput(event);
    }
}

function handleSearch(event) {
    if (window.catalogSearch) {
        return window.catalogSearch.handleSubmit(event);
    }
    return false;
}

function searchFor(query) {
    if (window.catalogSearch) {
        window.catalogSearch.searchFor(query);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
 */
document.addEventListener('DOMContentLoaded', function() {
    window.catalogSearch = new CatalogSearch();
});

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∏—Å–∫–æ–º
 */
const SearchUtils = {
    /**
     * –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏—è
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    },
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
     */
    getUrlParams() {
        const params = new URLSearchParams(window.location.search);
        return Object.fromEntries(params.entries());
    },
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Ç–æ–≤–∞—Ä–æ–≤
     */
    formatProductCount(count) {
        if (count === 1) return '1 —Ç–æ–≤–∞—Ä';
        if (count >= 2 && count <= 4) return `${count} —Ç–æ–≤–∞—Ä–∞`;
        return `${count} —Ç–æ–≤–∞—Ä–æ–≤`;
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { CatalogSearch, SearchUtils };
}