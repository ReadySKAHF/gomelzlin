# apps/core/management/commands/load_simple_data.py
from django.core.management.base import BaseCommand
from django.utils.text import slugify
from apps.catalog.models import Category, Product
from decimal import Decimal
import random


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'

    def handle(self, *args, **options):
        self.stdout.write('–ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_data = [
            '–ó–µ—Ä–Ω–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
            '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', 
            '–ö–∞—Ä—Ç–æ—Ñ–µ–ª–µ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
            '–ú–µ—Ç–∏–∑–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
            '–ü—Ä–æ—á–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
            '–ë—É–Ω–∫–µ—Ä—ã-–ø–µ—Ä–µ–≥—Ä—É–∑—á–∏–∫–∏',
            '–ù–æ–≤–∏–Ω–∫–∏',
            '–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã, —Ä–∞–±–æ—Ç—ã –∏ —É—Å–ª—É–≥–∏',
            '–†–µ–∂—É—â–∏–µ —Å–∏—Å—Ç–µ–º—ã –∂–∞—Ç–æ–∫',
            '–°–∞–º–æ—Ö–æ–¥–Ω—ã–µ –Ω–æ—Å–∏–ª–∫–∏'
        ]
        
        created_categories = []
        
        for i, category_name in enumerate(categories_data):
            category, created = Category.objects.get_or_create(
                name=category_name,
                defaults={
                    'slug': slugify(category_name),
                    'description': f'–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}',
                    'is_active': True,
                    'is_featured': i < 5,  # –ü–µ—Ä–≤—ã–µ 5 –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ
                    'sort_order': i + 1
                }
            )
            created_categories.append(category)
            
            if created:
                self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}')
            else:
                self.stdout.write(f'  –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {category_name}')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        subcategories_data = {
            '–ó–µ—Ä–Ω–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': [
                '–ñ–∞—Ç–∫–∏ –≤–∞–ª–∫–æ–≤—ã–µ –Ω–∞–≤–µ—Å–Ω—ã–µ',
                '–ñ–∞—Ç–∫–∏ –¥–ª—è –∑–µ—Ä–Ω–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä', 
                '–ü–æ–¥–±–æ—Ä—â–∏–∫–∏ –∑–µ—Ä–Ω–æ–≤—ã–µ'
            ],
            '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': [
                '–ñ–∞—Ç–∫–∏ –¥–ª—è —Ç—Ä–∞–≤',
                '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω—ã–µ –∫–æ–º–±–∞–π–Ω—ã',
                '–ö–æ—Å–∏–ª–∫–∏'
            ]
        }
        
        for parent_name, subcategory_names in subcategories_data.items():
            try:
                parent_category = Category.objects.get(name=parent_name)
                for j, subcategory_name in enumerate(subcategory_names):
                    subcategory, created = Category.objects.get_or_create(
                        name=subcategory_name,
                        parent=parent_category,
                        defaults={
                            'slug': slugify(f"{parent_name}-{subcategory_name}"),
                            'description': f'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è {subcategory_name}',
                            'is_active': True,
                            'sort_order': j + 1
                        }
                    )
                    if created:
                        self.stdout.write(f'  ‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_name}')
            except Category.DoesNotExist:
                continue
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products_created = 0
        
        for category in Category.objects.all():
            # –°–æ–∑–¥–∞–µ–º 3-5 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            num_products = random.randint(3, 5)
            
            for i in range(num_products):
                article = f"{category.name[:3].upper()}-{category.id:03d}-{i+1:03d}"
                product_name = f"{category.name} {i+1}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
                if Product.objects.filter(article=article).exists():
                    continue
                
                try:
                    product = Product.objects.create(
                        name=product_name,
                        slug=slugify(f"{article}-{product_name}"),
                        article=article,
                        category=category,
                        short_description=f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ {product_name}",
                        description=f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product_name}. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: –û–ê–û '–ì–ó–õ–∏–ù'. –ì–∞—Ä–∞–Ω—Ç–∏—è: 12 –º–µ—Å—è—Ü–µ–≤.",
                        price=Decimal(str(random.randint(1000, 500000))),
                        stock_quantity=random.randint(0, 50),
                        unit='pcs',
                        is_active=True,
                        is_published=True,
                        is_featured=random.choice([True, False]),
                        views_count=random.randint(0, 100)
                    )
                    products_created += 1
                except Exception as e:
                    self.stdout.write(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_categories = Category.objects.count()
        total_products = Product.objects.count()
        
        self.stdout.write(
            self.style.SUCCESS(f'\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        )
        self.stdout.write(f'üìä –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {total_categories}')
        self.stdout.write(f'üì¶ –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}')
        self.stdout.write(f'üÜï –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {products_created}')