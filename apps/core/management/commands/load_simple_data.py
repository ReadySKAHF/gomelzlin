# apps/core/management/commands/load_simple_data.py
from django.core.management.base import BaseCommand
from django.utils.text import slugify
from apps.catalog.models import Category, Product
from decimal import Decimal
import random


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'

    def handle(self, *args, **options):
        self.stdout.write('–ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_data = [
            '–ó–µ—Ä–Ω–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
            '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', 
            '–ö–∞—Ä—Ç–æ—Ñ–µ–ª–µ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
            '–ú–µ—Ç–∏–∑–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
            '–ü—Ä–æ—á–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
            '–ë—É–Ω–∫–µ—Ä—ã-–ø–µ—Ä–µ–≥—Ä—É–∑—á–∏–∫–∏',
            '–ù–æ–≤–∏–Ω–∫–∏',
            '–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã, —Ä–∞–±–æ—Ç—ã –∏ —É—Å–ª—É–≥–∏',
            '–†–µ–∂—É—â–∏–µ —Å–∏—Å—Ç–µ–º—ã –∂–∞—Ç–æ–∫',
            '–°–∞–º–æ—Ö–æ–¥–Ω—ã–µ –Ω–æ—Å–∏–ª–∫–∏'
        ]
        
        created_categories = []
        
        for i, category_name in enumerate(categories_data):
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            category = Category.objects.filter(name=category_name).first()
            
            if not category:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                category = Category.objects.create(
                    name=category_name,
                    slug=self.generate_unique_slug(category_name),
                    description=f'–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}',
                    is_active=True,
                    is_featured=i < 5,  # –ü–µ—Ä–≤—ã–µ 5 –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ
                    sort_order=i + 1
                )
                self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}')
            else:
                self.stdout.write(f'  –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {category_name}')
            
            created_categories.append(category)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        subcategories_data = {
            '–ó–µ—Ä–Ω–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': [
                '–ñ–∞—Ç–∫–∏ –≤–∞–ª–∫–æ–≤—ã–µ –Ω–∞–≤–µ—Å–Ω—ã–µ',
                '–ñ–∞—Ç–∫–∏ –¥–ª—è –∑–µ—Ä–Ω–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä', 
                '–ü–æ–¥–±–æ—Ä—â–∏–∫–∏ –∑–µ—Ä–Ω–æ–≤—ã–µ'
            ],
            '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': [
                '–ñ–∞—Ç–∫–∏ –¥–ª—è —Ç—Ä–∞–≤',
                '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω—ã–µ –∫–æ–º–±–∞–π–Ω—ã',
                '–ö–æ—Å–∏–ª–∫–∏'
            ]
        }
        
        for parent_name, subcategory_names in subcategories_data.items():
            try:
                parent_category = Category.objects.get(name=parent_name)
                for j, subcategory_name in enumerate(subcategory_names):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    subcategory = Category.objects.filter(
                        name=subcategory_name, 
                        parent=parent_category
                    ).first()
                    
                    if not subcategory:
                        subcategory = Category.objects.create(
                            name=subcategory_name,
                            parent=parent_category,
                            slug=self.generate_unique_slug(f"{parent_name}-{subcategory_name}"),
                            description=f'–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è {subcategory_name}',
                            is_active=True,
                            sort_order=j + 1
                        )
                        self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory_name}')
                    else:
                        self.stdout.write(f'  –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {subcategory_name}')
                        
            except Category.DoesNotExist:
                self.stdout.write(f'‚ùå –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {parent_name}')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        sample_products = [
            ('–ñ–í–ù-6–ê', '–ñ–∞—Ç–∫–∞ –≤–∞–ª–∫–æ–≤–∞—è –Ω–∞–≤–µ—Å–Ω–∞—è 6-–º–µ—Ç—Ä–æ–≤–∞—è', '–ó–µ—Ä–Ω–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–ñ–∞—Ç–∫–∏ –≤–∞–ª–∫–æ–≤—ã–µ –Ω–∞–≤–µ—Å–Ω—ã–µ'),
            ('–ñ–ó–ö-10', '–ñ–∞—Ç–∫–∞ –¥–ª—è –∑–µ—Ä–Ω–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä 10-–º–µ—Ç—Ä–æ–≤–∞—è', '–ó–µ—Ä–Ω–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–ñ–∞—Ç–∫–∏ –¥–ª—è –∑–µ—Ä–Ω–æ–≤—ã—Ö –∫—É–ª—å—Ç—É—Ä'),
            ('–ü–ó-3', '–ü–æ–¥–±–æ—Ä—â–∏–∫ –∑–µ—Ä–Ω–æ–≤–æ–π 3-–º–µ—Ç—Ä–æ–≤—ã–π', '–ó–µ—Ä–Ω–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–ü–æ–¥–±–æ—Ä—â–∏–∫–∏ –∑–µ—Ä–Ω–æ–≤—ã–µ'),
            ('–ñ–¢-4', '–ñ–∞—Ç–∫–∞ –¥–ª—è —Ç—Ä–∞–≤ 4-–º–µ—Ç—Ä–æ–≤–∞—è', '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–ñ–∞—Ç–∫–∏ –¥–ª—è —Ç—Ä–∞–≤'),
            ('–ö–£-7', '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω—ã–π –∫–æ–º–±–∞–π–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω—ã–µ –∫–æ–º–±–∞–π–Ω—ã'),
        ]
        
        products_created = 0
        for article, name, category_name, subcategory_name in sample_products:
            try:
                category = Category.objects.get(name=subcategory_name, parent__name=category_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
                if not Product.objects.filter(article=article).exists():
                    product = Product.objects.create(
                        name=name,
                        article=article,
                        slug=self.generate_unique_slug(f"{name}-{article}"),
                        description=f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {name}',
                        category=category,
                        price=Decimal(str(random.randint(100000, 2000000))),
                        stock_quantity=random.randint(1, 10),
                        is_active=True,
                        is_published=True
                    )
                    products_created += 1
                    self.stdout.write(f'‚úì –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: {name} ({article})')
                else:
                    self.stdout.write(f'  –¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {article}')
                    
            except Category.DoesNotExist:
                self.stdout.write(f'‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {subcategory_name}')
        
        self.stdout.write(f'\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
        self.stdout.write(f'  –¢–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {products_created}')
        self.stdout.write(f'  –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {Category.objects.count()}')
        self.stdout.write(f'  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {Product.objects.count()}')
        self.stdout.write('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

    def generate_unique_slug(self, text):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug"""
        base_slug = slugify(text)
        slug = base_slug
        counter = 1
        
        while Category.objects.filter(slug=slug).exists():
            slug = f"{base_slug}-{counter}"
            counter += 1
            
        return slug