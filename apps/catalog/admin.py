from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.db.models import Count, Q, F
from django.db import models
from .models import Category, Product

def russian_pluralize(number, forms):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ
    """
    forms_list = [form.strip() for form in forms.split(',')]
    if len(forms_list) != 3:
        return forms
    
    try:
        num = int(number)
        
        if 10 <= num % 100 <= 14:
            return forms_list[2]
        
        last_digit = num % 10
        
        if last_digit == 1:
            return forms_list[0]
        elif 2 <= last_digit <= 4:
            return forms_list[1]
        else:
            return forms_list[2]
            
    except (ValueError, IndexError):
        return forms

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    
    list_display = [
        'name', 
        'parent', 
        'product_count', 
        'sort_order',
        'is_featured_display', 
        'is_active',
        'created_at'
    ]
    list_filter = [
        'is_active', 
        'is_featured',  
        'parent',
        'created_at'
    ]
    search_fields = ['name', 'description']
    prepopulated_fields = {'slug': ('name',)}
    
    readonly_fields = ['product_count']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'slug', 'description')
        }),
        ('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', {
            'fields': ('image',),
            'classes': ('collapse',)
        }),
        ('–°—Ç—Ä—É–∫—Ç—É—Ä–∞', {
            'fields': ('parent', 'sort_order')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('is_featured', 'is_active'),
            'description': 'is_featured - –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"'
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('product_count',),
            'classes': ('collapse',)
        })
    )
    
    actions = ['make_featured', 'make_not_featured', 'activate_categories', 'deactivate_categories']
    
    def product_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∫–ª–æ–Ω–µ–Ω–∏–µ–º"""
        try:
            count = obj.products.filter(is_active=True, is_published=True).count()
            
            for child in obj.children.filter(is_active=True):
                count += child.products.filter(is_active=True, is_published=True).count()
            
            if count > 0:
                url = reverse('admin:catalog_product_changelist') + f'?category__id__exact={obj.id}'
                word = russian_pluralize(count, "—Ç–æ–≤–∞—Ä,—Ç–æ–≤–∞—Ä–∞,—Ç–æ–≤–∞—Ä–æ–≤")
                return format_html(
                    '<a href="{}" style="color: #007cba; font-weight: bold;">{} {}</a>',
                    url, count, word
                )
            return "0 —Ç–æ–≤–∞—Ä–æ–≤"
        except:
            return "0 —Ç–æ–≤–∞—Ä–æ–≤"
    product_count.short_description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤"
    
    def is_featured_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Å –∏–∫–æ–Ω–∫–æ–π"""
        if hasattr(obj, 'is_featured') and obj.is_featured:
            return format_html('‚≠ê <span style="color: #28a745;">–ü–æ–ø—É–ª—è—Ä–Ω–∞—è</span>')
        return format_html('‚òÜ <span style="color: #6c757d;">–û–±—ã—á–Ω–∞—è</span>')
    is_featured_display.short_description = "–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å"
    is_featured_display.admin_order_field = 'is_featured'
    

    def make_featured(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ"""
        count = queryset.update(is_featured=True)
        word = russian_pluralize(count, "–∫–∞—Ç–µ–≥–æ—Ä–∏—è,–∫–∞—Ç–µ–≥–æ—Ä–∏–∏,–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        self.message_user(request, f'{count} {word} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ.')
    make_featured.short_description = "‚≠ê –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ"
    
    def make_not_featured(self, request, queryset):
        """–£–±—Ä–∞—Ç—å –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö"""
        count = queryset.update(is_featured=False)
        word = russian_pluralize(count, "–∫–∞—Ç–µ–≥–æ—Ä–∏—è,–∫–∞—Ç–µ–≥–æ—Ä–∏–∏,–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        self.message_user(request, f'{count} {word} —É–±—Ä–∞–Ω–æ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö.')
    make_not_featured.short_description = "‚òÜ –£–±—Ä–∞—Ç—å –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö"
    
    def activate_categories(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        count = queryset.update(is_active=True)
        word = russian_pluralize(count, "–∫–∞—Ç–µ–≥–æ—Ä–∏—è,–∫–∞—Ç–µ–≥–æ—Ä–∏–∏,–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        self.message_user(request, f'{count} {word} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.')
    activate_categories.short_description = "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    
    def deactivate_categories(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        count = queryset.update(is_active=False)
        word = russian_pluralize(count, "–∫–∞—Ç–µ–≥–æ—Ä–∏—è,–∫–∞—Ç–µ–≥–æ—Ä–∏–∏,–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        self.message_user(request, f'{count} {word} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.')
    
    def get_queryset(self, request):
        qs = super().get_queryset(request)
        return qs.select_related('parent').prefetch_related('children', 'products')

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤"""
    
    list_display = [
        'name',
        'article',
        'category',
        'price',
        'stock_quantity',
        'is_featured_display', 
        'is_published',
        'is_active',
        'created_at'
    ]
    
    list_filter = [
        'category',
        'is_active',
        'is_published',
        'is_featured',  
        'unit',
        'created_at',
    ]
    
    search_fields = [
        'name',
        'article',
        'description',
        'short_description'
    ]
    
    prepopulated_fields = {'slug': ('name', 'article')}
    
    list_editable = [
        'price',
        'stock_quantity',
        'is_published',
        'is_active'
    ]
    

    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'name',
                'slug',
                'article',
                'category'
            )
        }),
        ('–û–ø–∏—Å–∞–Ω–∏–µ', {
            'fields': (
                'short_description',
                'description',
            )
        }),
        ('–¶–µ–Ω–∞ –∏ —Å–∫–ª–∞–¥', {
            'fields': (
                'price',
                'stock_quantity',
                'min_stock_level',
                'unit'
            )
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': (
                'is_active',
                'is_published',
                'is_featured', 
            ),
            'description': 'is_featured - –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ'
        }),
    )
    
    actions = [
        'publish_products', 
        'unpublish_products',
        'make_featured',
        'make_not_featured',
        'activate_products', 
        'deactivate_products'
    ]
    
    def is_featured_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ—Å—Ç–∏ —Å –∏–∫–æ–Ω–∫–æ–π"""
        if hasattr(obj, 'is_featured') and obj.is_featured:
            return format_html('‚≠ê <span style="color: #28a745;">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π</span>')
        return format_html('‚òÜ <span style="color: #6c757d;">–û–±—ã—á–Ω—ã–π</span>')
    is_featured_display.short_description = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π"
    is_featured_display.admin_order_field = 'is_featured'
    
    def publish_products(self, request, queryset):
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"""
        count = queryset.update(is_published=True)
        self.message_user(request, f'{count} —Ç–æ–≤–∞—Ä–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.')
    publish_products.short_description = "üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"
    
    def unpublish_products(self, request, queryset):
        """–°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        count = queryset.update(is_published=False)
        self.message_user(request, f'{count} —Ç–æ–≤–∞—Ä–æ–≤ —Å–Ω—è—Ç–æ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.')
    unpublish_products.short_description = "üìù –°–Ω—è—Ç—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    
    def make_featured(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ"""
        count = queryset.update(is_featured=True)
        self.message_user(request, f'{count} —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ.')
    make_featured.short_description = "‚≠ê –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ"
    
    def make_not_featured(self, request, queryset):
        """–£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"""
        count = queryset.update(is_featured=False)
        self.message_user(request, f'{count} —Ç–æ–≤–∞—Ä–æ–≤ —É–±—Ä–∞–Ω–æ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö.')
    make_not_featured.short_description = "‚òÜ –£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"
    
    def activate_products(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"""
        count = queryset.update(is_active=True)
        self.message_user(request, f'{count} —Ç–æ–≤–∞—Ä–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.')
    activate_products.short_description = "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"
    
    def deactivate_products(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"""
        count = queryset.update(is_active=False)
        self.message_user(request, f'{count} —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.')
    deactivate_products.short_description = "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"

class SubCategoryInline(admin.TabularInline):
    model = Category
    extra = 0
    fields = ['name', 'slug', 'sort_order', 'is_featured', 'is_active']
    prepopulated_fields = {'slug': ('name',)}

CategoryAdmin.inlines = [SubCategoryInline]

admin.site.site_header = '–û–ê–û "–ì–ó–õ–∏–ù" - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'
admin.site.site_title = '–ì–ó–õ–∏–ù –ê–¥–º–∏–Ω'
admin.site.index_title = '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'