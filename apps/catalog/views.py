# apps/catalog/views.py
from django.shortcuts import render, get_object_or_404
from django.views.generic import TemplateView, ListView, DetailView
from django.core.paginator import Paginator
from django.http import JsonResponse
from django.contrib import messages
from django.db.models import Q, Count, F, Exists, OuterRef
from django.db import models
from django.utils.decorators import method_decorator
from django.views.decorators.cache import cache_page
from .models import Category, Product


class ProductListView(TemplateView):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    template_name = 'catalog/product_list.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['title'] = '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑ parent)
        main_categories = Category.objects.filter(
            parent__isnull=True,
            is_active=True
        ).prefetch_related('children', 'products').order_by('sort_order', 'name')
        
        categories_with_counts = []
        for category in main_categories:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            total_products = self.get_category_product_count(category)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—ç–º–æ–¥–∑–∏)
            category_image = self.get_category_image(category.name)
            
            categories_with_counts.append({
                'id': category.id,
                'name': category.name,
                'description': getattr(category, 'description', ''),
                'slug': category.slug,
                'image': category_image,
                'total_products': total_products,
                'absolute_url': category.get_absolute_url() if hasattr(category, 'get_absolute_url') else f'/catalog/category/{category.slug}/',
            })
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ categories
        context['categories'] = categories_with_counts
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã
        try:
            featured_products = Product.objects.filter(
                is_active=True,
                is_published=True,
                is_featured=True
            ).select_related('category')[:6]
            context['featured_products'] = featured_products
        except:
            context['featured_products'] = []
        
        return context
    
    def get_category_product_count(self, category):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"""
        count = 0
        try:
            # –¢–æ–≤–∞—Ä—ã –≤ —Å–∞–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            count += category.products.filter(is_active=True, is_published=True).count()
            
            # –¢–æ–≤–∞—Ä—ã –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            for subcategory in category.children.filter(is_active=True):
                count += subcategory.products.filter(is_active=True, is_published=True).count()
        except:
            pass
        return count
    
    def get_category_image(self, category_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_emojis = {
            '–ó–µ—Ä–Ω–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': 'üåæ',
            '–ö–æ—Ä–º–æ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': 'üöú',
            '–ö–∞—Ä—Ç–æ—Ñ–µ–ª–µ—É–±–æ—Ä–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': 'ü•î',
            '–ú–µ—Ç–∏–∑–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è': 'üî©',
            '–ü—Ä–æ—á–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': '‚öôÔ∏è',
            '–ë—É–Ω–∫–µ—Ä—ã-–ø–µ—Ä–µ–≥—Ä—É–∑—á–∏–∫–∏': 'üì¶',
            '–ù–æ–≤–∏–Ω–∫–∏': '‚≠ê',
            '–ü—Ä–æ—á–∏–µ —Ç–æ–≤–∞—Ä—ã, —Ä–∞–±–æ—Ç—ã –∏ —É—Å–ª—É–≥–∏': 'üõ†Ô∏è',
            '–†–µ–∂—É—â–∏–µ —Å–∏—Å—Ç–µ–º—ã –∂–∞—Ç–æ–∫': 'üî™',
            '–°–∞–º–æ—Ö–æ–¥–Ω—ã–µ –Ω–æ—Å–∏–ª–∫–∏': 'üöõ',
        }
        return category_emojis.get(category_name, 'üè≠')


class CategoryDetailView(TemplateView):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    template_name = 'catalog/category_detail.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        slug = kwargs.get('slug')
        
        try:
            category = get_object_or_404(Category, slug=slug, is_active=True)
            context['category'] = category
            context['title'] = category.name
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategories = category.children.filter(is_active=True).order_by('sort_order', 'name')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            products = Product.objects.filter(
                category=category,
                is_active=True,
                is_published=True
            ).select_related('category').order_by('name')
            
            context['subcategories'] = subcategories
            context['products'] = products
            context['has_subcategories'] = subcategories.exists()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
            subcategories_with_counts = []
            for subcat in subcategories:
                subcategories_with_counts.append({
                    'category': subcat,
                    'product_count': subcat.products.filter(is_active=True, is_published=True).count()
                })
            context['subcategories_with_counts'] = subcategories_with_counts
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–ª–∏—Ç–∫–∞/—Å–ø–∏—Å–æ–∫)
            view_type = self.request.GET.get('view', 'grid')
            context['view_type'] = view_type
            
        except Category.DoesNotExist:
            context['category'] = None
            context['error'] = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            
        return context


class ProductDetailView(DetailView):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞"""
    model = Product
    template_name = 'catalog/product_detail.html'
    context_object_name = 'product'
    
    def get_queryset(self):
        return Product.objects.filter(
            is_active=True,
            is_published=True
        ).select_related('category')
    
    def get_object(self):
        obj = super().get_object()
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        if hasattr(obj, 'increment_views'):
            obj.increment_views()
        return obj
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        product = self.get_object()
        context['title'] = product.name
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        similar_products = Product.objects.filter(
            category=product.category,
            is_active=True,
            is_published=True
        ).exclude(id=product.id).select_related('category')[:4]
        
        context['similar_products'] = similar_products
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if hasattr(product, 'images'):
            context['product_images'] = product.images.filter(is_active=True).order_by('sort_order')
        
        return context


class ProductSearchView(ListView):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    model = Product
    template_name = 'catalog/product_search.html'
    context_object_name = 'products'
    paginate_by = 20
    
    def get_queryset(self):
        query = self.request.GET.get('q', '').strip()
        
        if not query:
            return Product.objects.none()
        
        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é –∏ –∞—Ä—Ç–∏–∫—É–ª—É
        queryset = Product.objects.filter(
            Q(name__icontains=query) |
            Q(short_description__icontains=query) |
            Q(description__icontains=query) |
            Q(article__icontains=query),
            is_active=True,
            is_published=True
        ).select_related('category').distinct()
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        queryset = queryset.order_by('-is_featured', 'name')
        
        return queryset
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        query = self.request.GET.get('q', '').strip()
        context['query'] = query
        context['title'] = f'–ü–æ–∏—Å–∫: {query}' if query else '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤'
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        view_type = self.request.GET.get('view', 'grid')
        context['view_type'] = view_type
        
        return context


def quick_search_ajax(request):
    """AJAX –ø–æ–∏—Å–∫ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞"""
    query = request.GET.get('q', '').strip()
    
    if len(query) < 2:
        return JsonResponse({'results': []})
    
    products = Product.objects.filter(
        Q(name__icontains=query) |
        Q(article__icontains=query),
        is_active=True,
        is_published=True
    ).select_related('category')[:10]
    
    results = []
    for product in products:
        results.append({
            'id': product.id,
            'name': product.name,
            'article': product.article,
            'price': str(product.price),
            'category': product.category.name if product.category else '',
            'url': product.get_absolute_url() if hasattr(product, 'get_absolute_url') else f'/catalog/product/{product.slug}/',
            'image': product.image.url if hasattr(product, 'image') and product.image else None
        })
    
    return JsonResponse({'results': results})


# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
class HomeView(TemplateView):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    template_name = 'pages/home.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        featured_categories = []
        categories = Category.objects.filter(
            parent__isnull=True,
            is_active=True,
            is_featured=True
        ).order_by('sort_order', 'name')[:6]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 6 –æ—Å–Ω–æ–≤–Ω—ã—Ö
        
        for category in categories:
            if category.slug:  # –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º slug
                product_count = self.count_products_in_category(category)
                featured_categories.append({
                    'id': category.id,
                    'name': category.name,
                    'description': category.description,
                    'get_absolute_url': category.get_absolute_url(),
                    'product_count': product_count
                })
        
        context['featured_categories'] = featured_categories
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        context['featured_products'] = Product.objects.filter(
            is_active=True,
            is_published=True,
            is_featured=True
        ).select_related('category')[:4]
        
        return context
    
    def count_products_in_category(self, category):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—Å–µ—Ö –µ—ë –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"""
        count = category.products.filter(is_active=True, is_published=True).count()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for child in category.children.filter(is_active=True):
            count += self.count_products_in_category(child)
        
        return count