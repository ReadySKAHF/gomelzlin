from django.contrib import admin
from .models import DealerCenter
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe

@admin.register(DealerCenter)
class DealerCenterAdmin(admin.ModelAdmin):
    list_display = (
        'name', 
        'city', 
        'dealer_type_badge', 
        'contact_person', 
        'phone_link', 
        'email_link',
        'coordinates_status',
        'map_preview',
        'is_featured',
        'sort_order',
        'status_badge'
    )
    list_filter = (
        'dealer_type', 
        'region', 
        'is_featured', 
        'is_verified', 
        'is_active', 
        'created_at'
    )
    search_fields = (
        'name', 
        'full_name',
        'city', 
        'contact_person', 
        'phone', 
        'email',
        'dealer_code'
    )
    readonly_fields = (
        'dealer_code', 
        'created_at', 
        'updated_at',
        'yandex_maps_link',
        'coordinates_info',
        'map_preview'
    )
    
    list_editable = ('is_featured', 'sort_order')
    list_per_page = 25

    actions = [
        'make_featured', 
        'remove_featured', 
        'activate_dealers', 
        'deactivate_dealers',
        'copy_coordinates_template'
    ]
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'full_name', 'dealer_type', 'dealer_code'),
            'classes': ('wide',),
            'description': '–í—ã–±–µ—Ä–∏—Ç–µ "–ì–ª–∞–≤–Ω—ã–π –∑–∞–≤–æ–¥" –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤'
        }),
        ('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('contact_person', 'position', 'phone', 'email', 'website'),
            'classes': ('wide',)
        }),
        ('–ê–¥—Ä–µ—Å', {
            'fields': ('region', 'city', 'address', 'postal_code'),
            'classes': ('wide',)
        }),
        ('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–∞—Ä—Ç—ã', {
            'fields': ('latitude', 'longitude', 'coordinates_info', 'yandex_maps_link', 'map_preview'),
            'classes': ('collapse',),
            'description': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ. –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É.'
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('working_hours', 'description'),
            'classes': ('wide',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('is_featured', 'is_verified', 'is_active', 'sort_order'),
            'classes': ('wide',),
            'description': 'is_featured - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö, sort_order - –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–º–µ–Ω—å—à–µ = –≤—ã—à–µ). –ó–∞–≤–æ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ.'
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def dealer_type_badge(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∏–ª–µ—Ä–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º –±—ç–¥–∂–µ–º"""
        colors = {
            'factory': '#28a745',  
            'official': '#007bff',    
            'authorized': '#17a2b8',  
            'partner': '#ffc107',      
            'distributor': '#6f42c1'   
        }
        color = colors.get(obj.dealer_type, '#6c757d')

        icon = 'üè≠' if obj.dealer_type == 'factory' else 'üè™'
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 8px; '
            'border-radius: 12px; font-size: 11px; font-weight: bold;">'
            '{} {}</span>',
            color, icon, obj.dealer_type_display
        )
    dealer_type_badge.short_description = '–¢–∏–ø –¥–∏–ª–µ—Ä–∞'
    dealer_type_badge.admin_order_field = 'dealer_type'
    
    def phone_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω"""
        if obj.phone:
            return format_html(
                '<a href="tel:{}" style="color: #28a745; text-decoration: none;">{}</a>',
                obj.phone, obj.phone
            )
        return '-'
    phone_link.short_description = '–¢–µ–ª–µ—Ñ–æ–Ω'
    phone_link.admin_order_field = 'phone'
    
    def email_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ email"""
        if obj.email:
            return format_html(
                '<a href="mailto:{}" style="color: #007bff; text-decoration: none;">{}</a>',
                obj.email, obj.email
            )
        return '-'
    email_link.short_description = 'Email'
    email_link.admin_order_field = 'email'
    
    def coordinates_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        if obj.has_coordinates:
            return format_html(
                '<span style="color: #28a745; font-weight: bold;">‚úì –ï—Å—Ç—å</span><br>'
                '<small style="color: #6c757d;">Lat: {}, Lng: {}</small>',
                obj.latitude, obj.longitude
            )
        return format_html('<span style="color: #dc3545;">‚úó –ù–µ—Ç</span>')
    coordinates_status.short_description = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'
    
    def map_preview(self, obj):
        """–ü—Ä–µ–≤—å—é –∫–∞—Ä—Ç—ã"""
        if obj.has_coordinates:
            return format_html(
                '<iframe src="https://yandex.ru/map-widget/v1/?pt={},{}&z=15&l=map" '
                'width="200" height="150" frameborder="0" style="border-radius: 8px;"></iframe>',
                obj.longitude, obj.latitude
            )
        return format_html(
            '<div style="width: 200px; height: 150px; background: #f8f9fa; '
            'border-radius: 8px; display: flex; align-items: center; justify-content: center; '
            'color: #6c757d; font-size: 12px; text-align: center;">'
            '–ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç<br>–¥–ª—è –ø—Ä–µ–≤—å—é</div>'
        )
    map_preview.short_description = '–ü—Ä–µ–≤—å—é –Ω–∞ –∫–∞—Ä—Ç–µ'
    
    def status_badge(self, obj):
        """–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if obj.is_active:
            if obj.is_verified:
                badge_color = '#28a745' if obj.dealer_type != 'factory' else '#20c997'
                return format_html(
                    '<span style="background-color: {}; color: white; padding: 2px 6px; '
                    'border-radius: 8px; font-size: 10px;">–ê–ö–¢–ò–í–ï–ù ‚úì</span>',
                    badge_color
                )
            else:
                return format_html(
                    '<span style="background-color: #ffc107; color: #333; padding: 2px 6px; '
                    'border-radius: 8px; font-size: 10px;">–ù–ï –í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–ù</span>'
                )
        return format_html(
            '<span style="background-color: #dc3545; color: white; padding: 2px 6px; '
            'border-radius: 8px; font-size: 10px;">–ù–ï–ê–ö–¢–ò–í–ï–ù</span>'
        )
    status_badge.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def yandex_maps_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã"""
        if obj.has_coordinates or obj.address:
            map_icon = 'üè≠' if obj.dealer_type == 'factory' else 'üó∫Ô∏è'
            return format_html(
                '<a href="{}" target="_blank" style="background-color: #cb413b; color: white; '
                'padding: 8px 15px; border-radius: 8px; text-decoration: none; font-weight: bold; '
                'display: inline-block; margin-bottom: 10px;">'
                '{} –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∞—Ö</a><br>'
                '<small style="color: #6c757d;">–û—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ</small>',
                obj.yandex_maps_url, map_icon
            )
        return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ'
    yandex_maps_link.short_description = '–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã'
    
    def coordinates_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö"""
        if obj.has_coordinates:
            return format_html(
                '<div style="background: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 15px; margin: 10px 0;">'
                '<strong style="color: #155724;">‚úì –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–¥–∞–Ω—ã</strong><br>'
                '<div style="margin: 10px 0;">'
                'üìç <strong>–®–∏—Ä–æ—Ç–∞:</strong> {}<br>'
                'üìç <strong>–î–æ–ª–≥–æ—Ç–∞:</strong> {}'
                '</div>'
                '<small style="color: #6c757d;">'
                '–û–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –Ω–∞ –∫–∞—Ä—Ç–µ –≤ —Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏. '
                '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.'
                '</small></div>',
                obj.latitude, obj.longitude
            )
        else:
            type_hint = '–∑–∞–≤–æ–¥' if obj.dealer_type == 'factory' else '–¥–∏–ª–µ—Ä'
            return format_html(
                '<div style="background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px; padding: 15px; margin: 10px 0;">'
                '<strong style="color: #721c24;">‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã</strong><br>'
                '<div style="margin: 10px 0;">'
                '<strong>–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É:</strong><br>'
                'üìç {}, {}'
                '</div>'
                '<small style="color: #6c757d;">'
                '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è {} –Ω–∞ –∫–∞—Ä—Ç–µ. '
                '–ú–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ '
                '<a href="https://yandex.by/maps" target="_blank">–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∞—Ö</a>.'
                '</small></div>',
                obj.city, obj.address, type_hint
            )
    coordinates_info.short_description = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö'

    def make_featured(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏"""
        count = queryset.update(is_featured=True)
        self.message_user(request, f'{count} –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ.')
    make_featured.short_description = '‚≠ê –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ'
    
    def remove_featured(self, request, queryset):
        """–£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"""
        non_factory_count = queryset.exclude(dealer_type='factory').update(is_featured=False)
        factory_count = queryset.filter(dealer_type='factory').count()
        
        message = f'{non_factory_count} –æ–±—ä–µ–∫—Ç–æ–≤ —É–±—Ä–∞–Ω—ã –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö.'
        if factory_count > 0:
            message += f' –ó–∞–≤–æ–¥—ã ({factory_count} —à—Ç.) –æ—Å—Ç–∞–ª–∏—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
        
        self.message_user(request, message)
    remove_featured.short_description = '‚≠ê –£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö'
    
    def activate_dealers(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∏–ª–µ—Ä–æ–≤"""
        count = queryset.update(is_active=True)
        self.message_user(request, f'{count} –æ–±—ä–µ–∫—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.')
    activate_dealers.short_description = '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'
    
    def deactivate_dealers(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∏–ª–µ—Ä–æ–≤"""
        count = queryset.update(is_active=False)
        self.message_user(request, f'{count} –æ–±—ä–µ–∫—Ç–æ–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.')
    deactivate_dealers.short_description = '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'
    
    def copy_coordinates_template(self, request, queryset):
        """–®–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        coordinates_list = []
        for obj in queryset:
            type_icon = 'üè≠' if obj.dealer_type == 'factory' else 'üè™'
            if obj.has_coordinates:
                coordinates_list.append(f"{type_icon} {obj.name}: {obj.latitude}, {obj.longitude}")
            else:
                coordinates_list.append(f"{type_icon} {obj.name}: –ù–ï–¢ –ö–û–û–†–î–ò–ù–ê–¢")
        
        self.message_user(
            request, 
            f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:\n" + "\n".join(coordinates_list)
        )
    copy_coordinates_template.short_description = 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'

    def save_model(self, request, obj, form, change):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        if not obj.dealer_code:
            obj.dealer_code = obj.generate_dealer_code()

        if obj.dealer_type == 'factory':
            obj.is_featured = True
            if obj.sort_order == 0:
                obj.sort_order = 1
        
        super().save_model(request, obj, form, change)
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É"""
        return super().get_queryset(request).select_related().extra(
            select={
                'type_order': """
                    CASE 
                        WHEN dealer_type = 'factory' THEN 0 
                        ELSE 1 
                    END
                """
            }
        ).order_by('type_order', 'sort_order', 'name')
    
    def get_list_filter(self, request):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã"""
        return (
            ('dealer_type', admin.ChoicesFieldListFilter),
            'region', 
            'is_featured', 
            'is_verified', 
            'is_active', 
            'created_at'
        )
    
    class Media:
        css = {
            'all': (
                'admin/css/custom_dealer_admin.css',
                'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css'
            )
        }
        js = ('admin/js/dealer_admin.js',)