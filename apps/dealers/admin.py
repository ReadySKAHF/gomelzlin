from django.contrib import admin
from .models import DealerCenter
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe

@admin.register(DealerCenter)
class DealerCenterAdmin(admin.ModelAdmin):
    list_display = (
        'name', 
        'city', 
        'dealer_type_badge', 
        'contact_person', 
        'phone_link', 
        'email_link',
        'coordinates_status',
        'is_featured',
        'sort_order',
        'status_badge'
    )
    list_filter = (
        'dealer_type', 
        'region', 
        'is_featured', 
        'is_verified', 
        'is_active', 
        'created_at'
    )
    search_fields = (
        'name', 
        'full_name',
        'city', 
        'contact_person', 
        'phone', 
        'email',
        'dealer_code'
    )
    readonly_fields = (
        'dealer_code', 
        'created_at', 
        'updated_at',
        'yandex_maps_link',
        'coordinates_info'
    )
    
    list_editable = ('is_featured', 'sort_order')
    list_per_page = 25

    actions = ['make_featured', 'remove_featured', 'activate_dealers', 'deactivate_dealers']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'full_name', 'dealer_type', 'dealer_code'),
            'classes': ('wide',)
        }),
        ('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('contact_person', 'position', 'phone', 'email', 'website'),
            'classes': ('wide',)
        }),
        ('–ê–¥—Ä–µ—Å', {
            'fields': ('region', 'city', 'address', 'postal_code'),
            'classes': ('wide',)
        }),
        ('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–∞—Ä—Ç—ã', {
            'fields': ('latitude', 'longitude', 'coordinates_info', 'yandex_maps_link'),
            'classes': ('collapse',),
            'description': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ'
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('working_hours', 'description'),
            'classes': ('wide',)
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
            'fields': ('is_featured', 'is_verified', 'is_active', 'sort_order'),
            'classes': ('wide',)
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def dealer_type_badge(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∏–ª–µ—Ä–∞ —Å —Ü–≤–µ—Ç–Ω—ã–º –±—ç–¥–∂–µ–º"""
        colors = {
            'official': '#28a745',   
            'authorized': '#007bff',  
            'partner': '#ffc107',     
            'distributor': '#6f42c1' 
        }
        color = colors.get(obj.dealer_type, '#6c757d')
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 8px; '
            'border-radius: 12px; font-size: 11px; font-weight: bold;">{}</span>',
            color, obj.dealer_type_display
        )
    dealer_type_badge.short_description = '–¢–∏–ø –¥–∏–ª–µ—Ä–∞'
    dealer_type_badge.admin_order_field = 'dealer_type'
    
    def phone_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω"""
        if obj.phone:
            return format_html('<a href="tel:{}">{}</a>', obj.phone, obj.phone)
        return '-'
    phone_link.short_description = '–¢–µ–ª–µ—Ñ–æ–Ω'
    phone_link.admin_order_field = 'phone'
    
    def email_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ email"""
        if obj.email:
            return format_html('<a href="mailto:{}">{}</a>', obj.email, obj.email)
        return '-'
    email_link.short_description = 'Email'
    email_link.admin_order_field = 'email'
    
    def coordinates_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        if obj.has_coordinates:
            return format_html(
                '<span style="color: #28a745; font-weight: bold;">‚úì –ï—Å—Ç—å</span>'
            )
        else:
            return format_html(
                '<span style="color: #dc3545; font-weight: bold;">‚úó –ù–µ—Ç</span>'
            )
    coordinates_status.short_description = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'
    

    
    def status_badge(self, obj):
        """–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if obj.is_active:
            return format_html(
                '<span style="background-color: #28a745; color: white; padding: 2px 6px; '
                'border-radius: 10px; font-size: 10px; font-weight: bold;">–ê–∫—Ç–∏–≤–µ–Ω</span>'
            )
        else:
            return format_html(
                '<span style="background-color: #dc3545; color: white; padding: 2px 6px; '
                'border-radius: 10px; font-size: 10px; font-weight: bold;">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>'
            )
    status_badge.short_description = '–°—Ç–∞—Ç—É—Å'
    status_badge.admin_order_field = 'is_active'
    
    def yandex_maps_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã"""
        if obj.has_coordinates or obj.address:
            return format_html(
                '<a href="{}" target="_blank" style="background-color: #cb413b; color: white; '
                'padding: 5px 10px; border-radius: 5px; text-decoration: none; font-weight: bold;">'
                'üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∞—Ö</a>',
                obj.yandex_maps_url
            )
        return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ'
    yandex_maps_link.short_description = '–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã'
    
    def coordinates_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö"""
        if obj.has_coordinates:
            return format_html(
                '–®–∏—Ä–æ—Ç–∞: <strong>{}</strong><br>'
                '–î–æ–ª–≥–æ—Ç–∞: <strong>{}</strong><br>'
                '<small style="color: #6c757d;">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–¥–∞–Ω—ã, –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —Ç–æ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ</small>',
                obj.latitude, obj.longitude
            )
        else:
            return format_html(
                '<span style="color: #dc3545;">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã</span><br>'
                '<small style="color: #6c757d;">–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É: {}, {}</small>',
                obj.city, obj.address
            )
    coordinates_info.short_description = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö'

    def make_featured(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏"""
        count = queryset.update(is_featured=True)
        self.message_user(request, f'{count} –¥–∏–ª–µ—Ä–æ–≤ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ.')
    make_featured.short_description = '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ'
    
    def remove_featured(self, request, queryset):
        """–£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"""
        count = queryset.update(is_featured=False)
        self.message_user(request, f'{count} –¥–∏–ª–µ—Ä–æ–≤ —É–±—Ä–∞–Ω—ã –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö.')
    remove_featured.short_description = '–£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö'
    
    def activate_dealers(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∏–ª–µ—Ä–æ–≤"""
        count = queryset.update(is_active=True)
        self.message_user(request, f'{count} –¥–∏–ª–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.')
    activate_dealers.short_description = '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'
    
    def deactivate_dealers(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∏–ª–µ—Ä–æ–≤"""
        count = queryset.update(is_active=False)
        self.message_user(request, f'{count} –¥–∏–ª–µ—Ä–æ–≤ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.')
    deactivate_dealers.short_description = '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'
    
    class Media:
        css = {
            'all': ('admin/css/custom_dealer_admin.css',)
        }
        js = ('admin/js/dealer_admin.js',)