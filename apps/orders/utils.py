from decimal import Decimal
from django.conf import settings
from .models import Order, OrderItem
from apps.accounts.models import UserProfile, CompanyProfile, DeliveryAddress


def get_user_order_defaults(user):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
    """
    defaults = {
        'customer_name': user.get_full_name(),
        'customer_email': user.email,
        'customer_phone': user.phone or '',
        'company_name': '',
        'company_unp': '',
        'company_address': '',
        'delivery_address': '',
        'default_address_id': None,
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        profile = user.profile
        if profile.city and profile.address:
            defaults['delivery_address'] = profile.get_full_address()
    except UserProfile.DoesNotExist:
        pass
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
    if user.is_company:
        try:
            company_profile = user.company_profile
            defaults.update({
                'company_name': company_profile.company_name or '',
                'company_unp': company_profile.unp or '',
                'company_address': company_profile.legal_address or '',
            })
        except CompanyProfile.DoesNotExist:
            pass
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        default_address = DeliveryAddress.objects.get(
            user=user,
            is_default=True,
            is_active=True
        )
        defaults['default_address_id'] = default_address.id
        defaults['delivery_address'] = default_address.get_full_address()
    except DeliveryAddress.DoesNotExist:
        pass
    
    return defaults


def calculate_delivery_cost(delivery_method, delivery_address=None, cart_total=None):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –∏ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
    """
    delivery_costs = {
        'pickup': Decimal('0.00'),
        'delivery': Decimal('10.00'),  # –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É
        'transport_company': Decimal('0.00'),  # –ü–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é
    }
    
    base_cost = delivery_costs.get(delivery_method, Decimal('0.00'))
    
    # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å–≤—ã—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã
    if cart_total and cart_total >= Decimal('500.00') and delivery_method == 'delivery':
        return Decimal('0.00')
    
    return base_cost


def validate_order_data(order_data):
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
    """
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = {
        'customer_name': '–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞',
        'customer_email': 'Email –∑–∞–∫–∞–∑—á–∏–∫–∞',
        'customer_phone': '–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞',
    }
    
    for field, label in required_fields.items():
        if not order_data.get(field, '').strip():
            errors.append(f'–ü–æ–ª–µ "{label}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º email
    import re
    email = order_data.get('customer_email', '').strip()
    if email and not re.match(r'^[^@]+@[^@]+\.[^@]+$', email):
        errors.append('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    phone = order_data.get('customer_phone', '').strip()
    if phone and not re.match(r'^\+?[\d\s\-\(\)]{7,}$', phone):
        errors.append('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –£–ù–ü –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
    unp = order_data.get('company_unp', '').strip()
    if unp and not re.match(r'^\d{9}$', unp):
        errors.append('–£–ù–ü –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 9 —Ü–∏—Ñ—Ä')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_method = order_data.get('delivery_method', 'pickup')
    if delivery_method != 'pickup':
        delivery_address = order_data.get('delivery_address', '').strip()
        if not delivery_address:
            errors.append('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
    
    return errors


def format_order_for_notification(order):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    items_text = []
    for item in order.items.all():
        items_text.append(f"- {item.product.name} x{item.quantity} = {item.get_total_price()} BYN")
    
    delivery_info = f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.get_delivery_method_display()}"
    if order.delivery_address:
        delivery_info += f"\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}"
    
    payment_info = f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.get_payment_method_display()}"
    
    formatted_text = f"""
–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.number}

–ó–∞–∫–∞–∑—á–∏–∫: {order.customer_name}
Email: {order.customer_email}
–¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}

{"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: " + order.company_name if order.company_name else ""}
{"–£–ù–ü: " + order.company_unp if order.company_unp else ""}

–¢–æ–≤–∞—Ä—ã:
{chr(10).join(items_text)}

{delivery_info}

{payment_info}

–û–±—â–∞—è —Å—É–º–º–∞: {order.total_amount} BYN

{"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + order.notes if order.notes else ""}

–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}
    """.strip()
    
    return formatted_text


def get_order_status_display(status):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —Å –∏–∫–æ–Ω–∫–æ–π
    """
    status_display = {
        'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'processing': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'shipped': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': 'üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
        'returned': '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω',
    }
    return status_display.get(status, status)


def can_cancel_order(order, user=None):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
    """
    # –ó–∞–∫–∞–∑ –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å
    if user and order.user != user:
        return False
    
    # –ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
    cancellable_statuses = ['pending', 'confirmed']
    if order.status not in cancellable_statuses:
        return False
    
    # –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä)
    if order.is_paid:
        return False
    
    return True


def get_delivery_time_estimate(delivery_method, city=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
    """
    estimates = {
        'pickup': '–ì–æ—Ç–æ–≤ –∫ —Å–∞–º–æ–≤—ã–≤–æ–∑—É –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π',
        'delivery': '–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π',
        'transport_company': '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 3-7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π',
    }
    
    base_estimate = estimates.get(delivery_method, '–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è')
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    if city and city.lower() not in ['–º–∏–Ω—Å–∫', '–≥–æ–º–µ–ª—å']:
        if delivery_method == 'delivery':
            base_estimate = '–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π'
    
    return base_estimate


def create_order_analytics_data(order):
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–∞
    """
    analytics_data = {
        'order_id': order.id,
        'order_number': order.number,
        'user_id': order.user.id if order.user else None,
        'customer_type': 'company' if order.company_name else 'individual',
        'delivery_method': order.delivery_method,
        'payment_method': order.payment_method,
        'total_amount': float(order.total_amount),
        'items_count': order.items.count(),
        'created_at': order.created_at.isoformat(),
        'source': 'website',
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    categories = set()
    for item in order.items.all():
        if hasattr(item.product, 'category') and item.product.category:
            categories.add(item.product.category.name)
    
    analytics_data['categories'] = list(categories)
    
    return analytics_data